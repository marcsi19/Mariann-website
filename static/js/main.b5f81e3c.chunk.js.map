{"version":3,"sources":["img/github.png","img/linkedin.png","img/resume.png","history.js","navbar.js","intro.js","contact.js","projects.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","createBrowserHistory","Navbar","react_default","a","createElement","className","react_router_dom","to","Intro","Contact","href","target","src","require","alt","Projects","Routes","react_router","path","component","exact","App","navbar","routes","Boolean","window","location","hostname","match","ReactDOM","render","history","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+HCCzBC,uBCqBAC,EAnBA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,WAAvB,QAGAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAYF,UAAU,WAA/B,YAGAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,WAAWF,UAAU,WAA9B,WAGAH,EAAAC,EAAAC,cAAA,qBCCSI,EAhBD,kBACZN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,qFAEEH,EAAAC,EAAAC,cAAA,WAFF,mBAIAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,2BAC0BH,EAAAC,EAAAC,cAAA,WAD1B,6BAEEF,EAAAC,EAAAC,cAAA,WAFF,qBAGEF,EAAAC,EAAAC,cAAA,WAHF,6BCiBSK,EAtBC,WACd,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGM,KAAK,8BAA8BC,OAAO,SAC3CT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,EAAQ,IAAqBC,IAAI,YAE7CZ,EAAAC,EAAAC,cAAA,KAAGM,KAAK,6CAA6CC,OAAO,SAC1DT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,EAAQ,IAAuBC,IAAI,cAG/CZ,EAAAC,EAAAC,cAAA,KACEM,KAAK,qFACLC,OAAO,SAEPT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,EAAQ,IAAqBC,IAAI,eCTtCC,EARE,WACf,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBCaNW,EAZA,WACb,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWJ,IACnCb,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWV,IAClCP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,IAAIC,UAAWX,OCI1Ba,EATH,WACV,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP5B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYyB,QAAS/B,GACnBE,EAAAC,EAAAC,cAAC4B,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b5f81e3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.624b8108.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.0e054d84.png\";","module.exports = __webpack_public_path__ + \"static/media/resume.14a810f6.png\";","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => (\n  <div className=\"navi\">\n    <nav className=\"main-nav\">\n      <Link to=\"/\" className=\"navlink\">\n        Home\n      </Link>\n      <br />\n      <Link to=\"/projects\" className=\"navlink\">\n        Projects\n      </Link>\n      <br />\n      <Link to=\"/contact\" className=\"navlink\">\n        Contact\n      </Link>\n      <br />\n    </nav>\n  </div>\n);\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Intro = () => (\n  <div className=\"main-page\">\n    <div className=\"intro\">\n      <h3 className=\"intro__title\">\n        \"A​rt enables us to find ourselves and lose ourselves at the same time​\"\n        <br />- Thomas Merton\n      </h3>\n      <div className=\"intro__content\">\n        Hi! My name is Mariann. <br />I am a software developer.\n        <br />I create websites.\n        <br /> Discover my projects!\n      </div>\n    </div>\n  </div>\n);\n\nexport default Intro;\n","import React from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Resume from \"./resume\";\n\nconst Contact = () => {\n  return (\n    <div className=\"contact-main\">\n      <div className=\"contact\">\n        <a href=\"https://github.com/marcsi19\" target=\"blank\">\n          <img src={require(\"./img/github.png\")} alt=\"github\" />\n        </a>\n        <a href=\"https://www.linkedin.com/in/mariannmateka/\" target=\"blank\">\n          <img src={require(\"./img/linkedin.png\")} alt=\"linkedin\" />\n        </a>\n        {/* <a href=\"https://bit.ly/2ZsoiWH\" target=\"blank\"> */}\n        <a\n          href=\"https://drive.google.com/file/d/1qqR97BQZuIXYLiFQRh0U0zzHYhVxeuk9/view?usp=sharing\"\n          target=\"blank\"\n        >\n          <img src={require(\"./img/resume.png\")} alt=\"resume\" />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\n\nconst Projects = () => {\n  return (\n    <div className=\"project\">\n      <div className=\"project__box\" />\n    </div>\n  );\n};\n\nexport default Projects;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Intro from \"./intro\";\nimport Contact from \"./contact\";\nimport Projects from \"./projects\";\n\nconst Routes = () => {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/projects\" component={Projects} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route exact path=\"/\" component={Intro} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\n\n// import \"./App.css\";\n\nimport Navbar from \"./navbar\";\nimport Routes from \"./routes\";\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <Routes />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport createBrowserHistory from \"./history\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n  <HashRouter history={createBrowserHistory}>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}